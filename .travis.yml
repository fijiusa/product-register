#これを実行する権限を宣言
sudo: required

#dockerを指定
services: docker

#travis ciのサーバーでコンテナを立てる
before_install:
    - docker-compose up --build -d
    #travis ciのサーバーの中で本番環境用imageをbuildしてherokuのdocker registryにpushするのでdockerを使えるようにする
    - docker login -u "$HEROKU_USERNAME" -p "$HEROKU_API_KEY" registry.heroku.com

script:
    #RAILS_ENVでtest環境を指定。dbを作りmigrateし、test scriptを回す
    - docker-compose exec --env 'RAILS_ENV=test' web rails db:create
    - docker-compose exec --env 'RAILS_ENV=test' web rails db:migrate
    - docker-compose exec --env 'RAILS_ENV=test' web rails test

#テストで問題がなければデプロイする
deploy:
    #本番環境にそのまま置くのであれば、providerはherokuで良い。今回はdockerだから。
    provider: script
    script:
        #buildの時-tで名前指定できたよね。-fはdockerfileって名前じゃなくてもbuildできるように。
        docker build -t registry.heroku.com/$HEROKU_APP_NAME/web -f Dockerfile.prod .;
        docker push registry.heroku.com/$HEROKU_APP_NAME/web;
        #今回の本番環境ではherokuサーバー側にpostgresを用意しているので、createは不要
        heroku run --app $HEROKU_APP_NAME rails db:migrate;
    on:
        #デプロイはmasterにmergeされた時だけ
        branch: master
#need to add this